@model IEnumerable<ShiftManagerProject.Models.FinalShift>

@{
    ViewBag.Title = "This Week's Shifts";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int j = 0;
    int i = 0;
    int shiftopt = ViewBag.shifts;
    int mo = ViewBag.morning;
    int a = ViewBag.afternoon;
    int n = ViewBag.night;

    DateTime nextSunday = DateTime.Now.AddDays(1);
    while (nextSunday.DayOfWeek != DayOfWeek.Sunday)
    { nextSunday = nextSunday.AddDays(1); }
    var NextWeek = Convert.ToDateTime(nextSunday).ToString("dd/MM/yyyy");
}

<link rel="stylesheet" type="text/css" href="~/Content/FinalShiftIndex.css" />
<script src="https://code.jquery.com/jquery-3.3.1.min.js"
        integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
        crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>

<br /><br />
<h2>Next Week's Shifts - @NextWeek</h2>
<br /><br />
<div class="btn-group SavedSubmitBTN" role="group" aria-label="Button group with nested dropdown">
    <button type="button" class="btn btn-success">Actions</button>
    <div class="btn-group" role="group">
        <button id="btnGroupDrop1" type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
        <div class="dropdown-menu" aria-labelledby="btnGroupDrop1" style="text-align:center;">
            @Html.ActionLink("Remake", "NewClose", "FinalShifts", null, new { @class = "dropdown-item" })
            @Html.ActionLink("Save Schedule", "SaveToRemake", "FinalShifts", null, new { @class = "dropdown-item" })
        </div>
    </div>
</div>
<p id="NoOfShifts"></p>
<br /><br />
<div class='table-responsive'>
    <table id="tablePreview" class="table table-hover table-bordered">
        <tr class="table-active headertbl">
            <th>
            </th>
            @foreach (var item in Model.Select(x => x.Day).Distinct())
            {
                <th>
                    @Html.DisplayFor(x => item)
                </th>
            }
        </tr>


        @foreach (var items in Model.Take(mo))
        {
            <tr>
                <td class="table-info bold">
                    @Html.DisplayNameFor(model => model.Morning)
                </td>
                @foreach (var Mshift in Model.Where(x => x.Morning == true).OrderBy(m => m.OfDayType))
                {

                    if (Mshift.OfDayType == j)
                    {

                        j += shiftopt;
                        if (Mshift.Name.IsEmpty())
                        {
                            <td>
                                @Html.ActionLink("Update", "Edit", new { id = Mshift.ID }, new { @class = "badge badge-danger" })
                            </td>
                        }
                        else
                        {
                            <td class="tbl">
                                @Html.ActionLink(Mshift.Name, "Edit", new { id = Mshift.ID }, new { @class = Mshift.Name })
                            </td>
                        }

                    }
                }
            </tr>
            j = ++i;
        }

        @{ j = i;}
        @foreach (var items in Model.Take(a))
        {
            <tr>
                <td class="table-success bold">
                    @Html.DisplayNameFor(model => model.Afternoon)
                </td>

                @foreach (var Ashift in Model.Where(x => x.Afternoon == true).OrderBy(m => m.OfDayType))
                {

                    if (Ashift.OfDayType == j)
                    {
                        j += shiftopt;
                        if (Ashift.Name.IsEmpty())
                        {
                            <td>
                                @Html.ActionLink("Update", "Edit", new { id = Ashift.ID }, new { @class = "badge badge-danger" })
                            </td>
                        }
                        else
                        {
                            <td class="tbl">
                                @Html.ActionLink(Ashift.Name, "Edit", new { id = Ashift.ID }, new { @class = Ashift.Name })
                            </td>
                        }
                    }

                }
            </tr>
            j = ++i;
        }

        @{ j = i;}

        @foreach (var items in Model.Take(n))
        {
            <tr>
                <td class="table-warning bold">
                    @Html.DisplayNameFor(model => model.Night)
                </td>
                @foreach (var Nshift in Model.Where(x => x.Night == true).OrderBy(m => m.OfDayType))
                {

                    if (Nshift.OfDayType == j)
                    {
                        j += shiftopt;
                        if (Nshift.Name.IsEmpty())
                        {
                            <td>
                                @Html.ActionLink("Update", "Edit", new { id = Nshift.ID }, new { @class = "badge badge-danger" })
                            </td>
                        }
                        else
                        {
                            <td class="tbl">
                                @Html.ActionLink(Nshift.Name, "Edit", new { id = Nshift.ID }, new { @class = Nshift.Name })
                            </td>
                        }
                    }
                }
            </tr>
            j = ++i;
        }
    </table>
</div>

<script>
    $(document).ready(function () {
        $('.dropdown-toggle').dropdown()

        $('a:contains("UpdateMe!")').addClass('badge badge-danger');

        var obj = {};
        $('.tbl').children().each(function () {
            $.each((this.className || '').split(/\s+/), function (i, v) {
                obj[v] = true;
            })
        })
        var classes = $.map(obj, function (val, key) {
            return key == '' ? undefined : key;
        })

        var num = 0;
        var elms = {};
        var n = {}, nclasses = classes.length;
        function changeColor(classname, color) {
            var curN = n[classname];
            for (var i = 0; i < curN; i++) {
                elms[classname][i].style.backgroundColor = color;
            }
            num = i;
        }

        for (var k = 0; k < nclasses; k++) {
            var curClass = classes[k];
            elms[curClass] = document.getElementsByClassName(curClass);
            n[curClass] = elms[curClass].length;
            var curN = n[curClass];
            for (var i = 0; i < curN; i++) {
                elms[curClass][i].onmouseover = function () {
                    changeColor(this.className, "yellow");
                    document.getElementById("NoOfShifts").innerHTML = num;
                };
                elms[curClass][i].onmouseout = function () {
                    changeColor(this.className, "white");
                    document.getElementById("NoOfShifts").innerHTML = "";
                };
            }
        };

    });
</script>

<br /><br />
@{
    if (@ViewBag.admin != 0)
    {
        <h3>Offically Closed!</h3>
    }
    else
    {
        @Html.ActionLink("Submit", "Send", "", new { @class = "btn btn-outline-danger btn-block" })
    }
}
<br /><br />


